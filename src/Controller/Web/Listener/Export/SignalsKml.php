<?php
namespace App\Controller\Web\Listener\Export;

use App\Controller\Web\Listener\Base;
use App\Repository\ListenerRepository;
use App\Repository\TypeRepository;
use Symfony\Component\Routing\Annotation\Route;  // Required for annotations

/**
 * Class Listeners
 * @package App\Controller\Web\Listener\Export
 */
class SignalsKml extends Base
{
    /**
     * @Route(
     *     "/{system}/listeners/{id}/export/signals.kml/{type}/{active}",
     *     requirements={
     *        "system": "reu|rna|rww"
     *     },
     *     defaults={"id"="", "type"="*", "active"="*"},
     *     name="listener_export_signals_kml"
     * )
     */
    public function signalsKmlController(
        $system,
        $id,
        $type,
        $active,
        ListenerRepository $listenerRepository,
        TypeRepository $typeRepository
    ) {
        if (!$listener = $this->getValidListener($id, $listenerRepository)) {
            return $this->redirectToRoute('listeners', ['system' => $system]);
        }
        $filter =                   [];
        if ($active !== '*') {
            $filter['active'] = $active;
        }
        if ($type !== '*') {
            $filter['type'] = explode(',', $type);
        }
        $parameters = [
            'colors' =>             $typeRepository->getMapIconColorForCodes(),
            'description' =>        "Generated by ".strToUpper($system)." on ".date('Y-m-d'),
            'filter' =>             $filter,
            'signals' =>            $listenerRepository->getSignalsForListener($id, $filter),
            'title' =>              strToUpper($system).' stations received by '.$listener->getName(),
            'types' =>              $typeRepository->getAll()
        ];
        $parameters =   array_merge($parameters, $this->parameters);
        $filename =
             "signals_"
            .$id
            .($type !== '*' ? "_type_".str_replace(',','_', $type) : '')
            .($active !== '*' ? "_".($active ? "active" : "inactive") : "")
            .".kml";
        $response =     $this->render('listener/export/signals.kml.twig', $parameters);
        $response->headers->set('Content-Disposition',"attachment;filename={$filename}");
        $response->headers->set('Content-Type', 'application/vnd.google-earth.kml+xml');
//        $response->headers->set('Content-Type', 'text/plain');
        return $response;
    }
}
