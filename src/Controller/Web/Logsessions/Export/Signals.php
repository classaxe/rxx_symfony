<?php
namespace App\Controller\Web\Logsessions\Export;

use App\Controller\Web\Base;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class Listeners
 * @package App\Controller\Web\Logsessions\Export
 */
class Signals extends Base
{
    /**
     * @Route(
     *     "/{_locale}/{system}/logsessions/{id}/signals/export/csv",
     *     requirements={
     *        "_locale": "de|en|es|fr",
     *        "system": "reu|rna|rww"
     *     },
     *     defaults={"id"=""},
     *     name="logsession_signals_export_csv"
     * )
     * @param $_locale
     * @param $system
     * @param $id
     * @return RedirectResponse|Response
     */
    public function csv(
        $_locale,
        $system,
        $id
    ) {
        return $this->export($_locale, $system, $id, 'csv');
    }

    /**
     * @Route(
     *     "/{_locale}/{system}/logsessions/{id}/signals/export/kml/{type}/{active}",
     *     requirements={
     *        "_locale": "de|en|es|fr",
     *        "system": "reu|rna|rww"
     *     },
     *     defaults={"id"="", "type"="*", "active"="*"},
     *     name="logsession_signals_export_kml"
     * )
     * @param $_locale
     * @param $system
     * @param $id
     * @param $type
     * @param $active
     * @return RedirectResponse|Response
     */
    public function kml(
        $_locale,
        $system,
        $id,
        $type,
        $active
    ) {
        if (!$this->logsessionRepository->find($id)) {
            return $this->redirectToRoute(
                'logsessions',
                [ '_locale' => $_locale, 'system' => $system ]
            );
        }
        $filter =                   [];
        if ($active !== '*') {
            $filter['active'] = $active;
        }
        if ($type !== '*') {
            $filter['type'] = explode(',', $type);
        }
        $args = ['logsessionID' => $id];
        $parameters = [
            'colors' =>             $this->typeRepository->getMapIconColorForCodes(),
            'description' =>        "Generated by ".strToUpper($system)." on ".date('Y-m-d'),
            'filter' =>             $filter,
            '_locale' =>            $_locale,
            'signals' =>            $this->signalRepository->getSignals($args),
            'title' =>              strToUpper($system).' stations received in session '.$id,
            'types' =>              $this->typeRepository->getAll()
        ];
        $parameters =   array_merge($parameters, $this->parameters);
        $filename =
            "session_"
            .$id
            ."_signals"
            .($type !== '*' ? "_type_".str_replace(',','_', $type) : '')
            .($active !== '*' ? "_".($active ? "active" : "inactive") : "")
            .".kml";
        $response =     $this->render('listener/export/signals.kml.twig', $parameters);
        $response->headers->set('Content-Disposition',"attachment;filename={$filename}");
        $response->headers->set('Content-Type', 'application/vnd.google-earth.kml+xml');
//        $response->headers->set('Content-Type', 'text/plain');
        return $response;
    }

    /**
     * @Route(
     *     "/{_locale}/{system}/logsessions/{id}/signals/export/txt",
     *     requirements={
     *        "_locale": "de|en|es|fr",
     *        "system": "reu|rna|rww"
     *     },
     *     defaults={"id"=""},
     *     name="logsession_signals_export_txt"
     * )
     * @param $_locale
     * @param $system
     * @param $id
     * @return RedirectResponse|Response
     */
    public function txt(
        $_locale,
        $system,
        $id
    ) {
        return $this->export($_locale, $system, $id, 'txt');
    }

    /**
     * @param $_locale
     * @param $system
     * @param $id
     * @param $mode
     * @return RedirectResponse|Response
     */
    private function export(
        $_locale,
        $system,
        $id,
        $mode
    ) {
        if (!$logsession = $this->logsessionRepository->find($id)) {
            return $this->redirectToRoute('logsession', ['system' => $system]);
        }
        $listener = $this->listenerRepository->find($logsession->getListenerId());
        $sortableColumns = $this->listenerRepository->getColumns('logs');
        $args = ['logsessionID' => $id, 'sort' => 'khz'];
        $columns = $this->listenerRepository->getColumns('signals');
        $signals = $this->signalRepository->getSignals($args, $columns);
        $parameters = [
            '_locale' =>            $_locale,
            'title' =>              strToUpper($system) . ' signals for log session ' . $id . " for " . $listener->getName(),
            'subtitle' =>           '(' . count($signals) . ' records sorted by Frequency and ID)',
            'system' =>             $system,
            'listener' =>           $listener,
            'signals' =>            $signals,
            'typeRepository' =>     $this->typeRepository
        ];
        $parameters =   array_merge($parameters, $this->parameters);
        switch ($mode) {
            case 'csv':
                $response = $this->render("listener/export/signals.csv.twig", $parameters);
                break;
            case 'txt':
                $response = $this->render("listener/export/signals.txt.twig", $parameters);
                break;
        }
        $response->headers->set('Content-Type', 'text/plain');
        $response->headers->set('Content-Disposition',"attachment;filename=logsession_{$id}_signals.{$mode}");
        return $response;
    }
}
